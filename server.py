import os
import json
import time
import sqlite3
import threading
import logging
from datetime import datetime, timedelta, timezone
from typing import Optional, List

import requests
from flask import Flask, request, jsonify, abort

# -------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
API_SECRET = os.getenv("API_SECRET", "supersecret")     # —Å–µ–∫—Ä–µ—Ç –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API (–¥–ª—è –º–µ–Ω—è)
DEFAULT_TZ = os.getenv("DEFAULT_TZ", "+05:00")          # —Ç–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (GMT+5)

# –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å URL –≤–µ–±—Ö—É–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω
BASE_URL = os.getenv("WEBHOOK_BASE_URL") or os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL") or (BASE_URL.rstrip("/") + "/webhook" if BASE_URL else None)
if not WEBHOOK_URL:
    raise ValueError("WEBHOOK_URL/WEBHOOK_BASE_URL/RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω—ã –∏ –∏—Ö –Ω–µ–ª—å–∑—è –≤—ã–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

ADMIN_IDS = []
raw_admins = os.getenv("ADMIN_IDS", "")
if raw_admins.strip():
    for part in raw_admins.replace(" ", "").split(","):
        if part:
            ADMIN_IDS.append(int(part))

TELEGRAM_API = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

DB_PATH = "reminders.db"

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("reminder-bot")

app = Flask(__name__)

# -------------------- –£—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ --------------------
def parse_tz_offset(tz_str: str) -> timezone:
    """
    tz_str –≤–∏–¥–∞ '+05:00' –∏–ª–∏ '-03:30'
    """
    if not tz_str or len(tz_str) < 3:
        tz_str = DEFAULT_TZ
    sign = 1 if tz_str.startswith("+") else -1
    hh, mm = tz_str[1:].split(":")
    return timezone(sign * timedelta(hours=int(hh), minutes=int(mm)))

def local_to_utc(dt_local_str: str, tz_str: Optional[str]) -> datetime:
    """
    dt_local_str: 'YYYY-MM-DD HH:MM' –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –ø–æ—è—Å–µ tz_str (–∏–ª–∏ DEFAULT_TZ)
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç UTC-aware datetime
    """
    tz = parse_tz_offset(tz_str or DEFAULT_TZ)
    naive = datetime.strptime(dt_local_str.strip(), "%Y-%m-%d %H:%M")
    aware = naive.replace(tzinfo=tz)
    return aware.astimezone(timezone.utc)

def now_utc() -> datetime:
    return datetime.now(timezone.utc)

# -------------------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö --------------------
def db():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with db() as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER NOT NULL,
                text TEXT NOT NULL,
                send_at_utc TEXT NOT NULL,
                created_at_utc TEXT NOT NULL,
                attempts INTEGER NOT NULL DEFAULT 0
            )
        """)
        conn.execute("CREATE INDEX IF NOT EXISTS idx_due ON reminders(send_at_utc)")
    log.info("‚úÖ DB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# -------------------- –¢–µ–ª–µ–≥—Ä–∞–º --------------------
def tg_send_message(chat_id: int, text: str) -> bool:
    try:
        r = requests.post(f"{TELEGRAM_API}/sendMessage", json={"chat_id": chat_id, "text": text})
        if r.status_code == 429:
            retry = r.json().get("parameters", {}).get("retry_after", 1)
            time.sleep(retry)
            r = requests.post(f"{TELEGRAM_API}/sendMessage", json={"chat_id": chat_id, "text": text})
        ok = r.ok and r.json().get("ok", False)
        if not ok:
            log.warning(f"‚úñÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {chat_id}: {r.text}")
        return ok
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")
        return False

def set_webhook():
    r = requests.post(f"{TELEGRAM_API}/setWebhook", json={"url": WEBHOOK_URL, "allowed_updates": ["message"]})
    try:
        log.info(f"üì° –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {r.json()}")
    except Exception:
        log.info(f"üì° setWebhook HTTP {r.status_code}")

# -------------------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ --------------------
STOP_FLAG = False

def scheduler_loop():
    log.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    while not STOP_FLAG:
        try:
            # –ë–µ—Ä—ë–º –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–ª–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Å –Ω–µ–±–æ–ª—å—à–∏–º –±—É—Ñ–µ—Ä–æ–º)
            due_ts = now_utc().isoformat()
            with db() as conn:
                rows = conn.execute(
                    "SELECT * FROM reminders WHERE send_at_utc <= ? ORDER BY id LIMIT 50",
                    (due_ts,)
                ).fetchall()

            for row in rows:
                rid = row["id"]
                chat_id = row["chat_id"]
                text = row["text"]
                ok = tg_send_message(chat_id, text)
                with db() as conn:
                    if ok:
                        conn.execute("DELETE FROM reminders WHERE id = ?", (rid,))
                    else:
                        # –Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ—è: –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, –º–∞–∫—Å–∏–º—É–º 5 –ø–æ–ø—ã—Ç–æ–∫
                        if row["attempts"] >= 5:
                            conn.execute("DELETE FROM reminders WHERE id = ?", (rid,))
                        else:
                            new_time = (datetime.fromisoformat(row["send_at_utc"]).replace(tzinfo=timezone.utc)
                                        + timedelta(minutes=1)).isoformat()
                            conn.execute(
                                "UPDATE reminders SET attempts = attempts + 1, send_at_utc = ? WHERE id = ?",
                                (new_time, rid)
                            )
        except Exception as e:
            log.exception(f"–°–±–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

        time.sleep(20)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫

# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ --------------------
def require_secret(req):
    sec = req.headers.get("X-Api-Secret") or req.args.get("secret")
    if sec != API_SECRET:
        abort(401, "Unauthorized")

def add_many_reminders(chat_ids: List[int], text: str, dt_local: str, tz_str: Optional[str]) -> int:
    utc_dt = local_to_utc(dt_local, tz_str)
    utc_iso = utc_dt.isoformat()
    created = now_utc().isoformat()
    count = 0
    with db() as conn:
        for cid in chat_ids:
            conn.execute(
                "INSERT INTO reminders (chat_id, text, send_at_utc, created_at_utc) VALUES (?, ?, ?, ?)",
                (int(cid), text, utc_iso, created)
            )
            count += 1
    return count

# -------------------- Flask –º–∞—Ä—à—Ä—É—Ç—ã --------------------
@app.get("/")
def root():
    return "OK", 200

@app.post("/webhook")
def webhook():
    update = request.get_json(force=True, silent=True) or {}
    msg = update.get("message") or {}
    chat_id = msg.get("chat", {}).get("id")
    text = (msg.get("text") or "").strip()

    # –ü—Ä–æ—Å—Ç–æ–π /start
    if text == "/start":
        tg_send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é. –§–æ—Ä–º–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: \n/add 2025-08-14 10:00 –ù–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å")
        return jsonify(ok=True)

    # –ö–æ–º–∞–Ω–¥–∞ /add YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é DEFAULT_TZ)
    if text.startswith("/add "):
        try:
            _, rest = text.split(" ", 1)
            dt_part = rest[:16]  # 'YYYY-MM-DD HH:MM'
            user_text = rest[17:].strip()
            if not user_text:
                raise ValueError("–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
            add_many_reminders([chat_id], user_text, dt_part, DEFAULT_TZ)
            tg_send_message(chat_id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ {dt_part} ({DEFAULT_TZ})")
        except Exception as e:
            tg_send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: /add 2025-08-14 10:00 –ü–æ–∑–≤–æ–Ω–∏—Ç—å. –î–µ—Ç–∞–ª–∏: {e}")
        return jsonify(ok=True)

    # –°–ø—Ä–∞–≤–∫–∞
    if text in ("/help", "help", "?"):
        tg_send_message(chat_id, "–ö–æ–º–∞–Ω–¥—ã:\n/start\n/add YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç (–≤—Ä–µ–º—è –ø–æ —Ç–≤–æ–µ–º—É –ø–æ—è—Å—É)")
        return jsonify(ok=True)

    # –ú–æ–ª—á–∏–º –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    return jsonify(ok=True)

# ----------- –í–Ω–µ—à–Ω–∏–π API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–¥–ª—è –º–µ–Ω—è) -----------
@app.post("/api/add_reminder")
def api_add():
    require_secret(request)
    data = request.get_json(force=True)
    # –ü—Ä–∏–º–µ—Ä JSON:
    # { "chat_ids": [123, 456], "text": "–¢–µ—Å—Ç –∏–∑ API", "when": "2025-08-14 09:30", "tz": "+05:00" }
    chat_ids = data.get("chat_ids")
    text = data.get("text")
    when = data.get("when")
    tz = data.get("tz") or DEFAULT_TZ

    if not chat_ids or not text or not when:
        abort(400, "chat_ids, text, when –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")

    count = add_many_reminders(chat_ids, text, when, tz)
    return jsonify(ok=True, inserted=count)

@app.get("/api/list")
def api_list():
    require_secret(request)
    with db() as conn:
        rows = conn.execute("SELECT id, chat_id, text, send_at_utc, attempts FROM reminders ORDER BY send_at_utc").fetchall()
    return jsonify([dict(r) for r in rows])

@app.post("/api/delete")
def api_delete():
    require_secret(request)
    rid = (request.get_json(force=True) or {}).get("id")
    if not rid:
        abort(400, "id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    with db() as conn:
        conn.execute("DELETE FROM reminders WHERE id = ?", (rid,))
    return jsonify(ok=True)

# -------------------- –°—Ç–∞—Ä—Ç --------------------
init_db()
set_webhook()

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ñ–æ–Ω–µ
threading.Thread(target=scheduler_loop, daemon=True).start()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è gunicorn
app = app
