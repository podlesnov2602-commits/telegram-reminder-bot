import os
import logging
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler()
scheduler.start()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    chat_id, text = context.job.context
    await context.bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/–Ω–∞–ø–æ–º–Ω–∏ HH:MM —Ç–µ–∫—Å—Ç"
    )

# –ö–æ–º–∞–Ω–¥–∞ /–Ω–∞–ø–æ–º–Ω–∏
async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = context.args[0]
        text = " ".join(context.args[1:])

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è
        remind_time = datetime.strptime(time_str, "%H:%M").time()
        now = datetime.now()
        target = datetime.combine(now.date(), remind_time)

        if target < now:
            target += timedelta(days=1)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        scheduler.add_job(
            send_reminder,
            "date",
            run_date=target,
            args=[context],
            kwargs={},
            id=f"{update.effective_chat.id}_{time_str}",
            replace_existing=True
        )
        scheduler.add_job(
            send_reminder,
            "date",
            run_date=target,
            args=[context],
            kwargs={},
            id=f"{update.effective_chat.id}_{time_str}",
            replace_existing=True
        )
        scheduler.add_job(
            send_reminder,
            "date",
            run_date=target,
            args=[],
            kwargs={},
            id=None,
            replace_existing=False
        )

        # –ü–µ—Ä–µ–¥–∞—ë–º chat_id –∏ —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        scheduler.add_job(
            send_reminder,
            "date",
            run_date=target,
            args=[],
            kwargs={},
            id=None,
            replace_existing=False,
            jobstore=None,
            misfire_grace_time=None,
            coalesce=True,
            context=(update.effective_chat.id, text)
        )

        await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}: {text}")

    except Exception as e:
        logging.error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: /–Ω–∞–ø–æ–º–Ω–∏ HH:MM —Ç–µ–∫—Å—Ç")

# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("–Ω–∞–ø–æ–º–Ω–∏", remind))

if __name__ == "__main__":
    app.run_polling()
