import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–û–°–¢–û–†–û–ñ–ù–û: —Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–¥–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)
TOKEN = "8390901633:AAGWzRUhrm2qst2IDyk9tDwJvJvq2Lxv6Nw"

scheduler = BackgroundScheduler()
scheduler.start()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
        "–ù–∞–ø–∏—à–∏ /napomni HH:MM —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —è –Ω–∞–ø–æ–º–Ω–∏–ª.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /napomni 14:30 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /napomni
async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = context.args[0]
        reminder_text = " ".join(context.args[1:])

        if not reminder_text:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏.")
            return

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        reminder_time = datetime.strptime(time_str, "%H:%M").time()
        now = datetime.now()
        reminder_datetime = datetime.combine(now.date(), reminder_time)

        if reminder_datetime < now:
            reminder_datetime += timedelta(days=1)

        chat_id = update.effective_chat.id
        reminders[chat_id] = (reminder_datetime, reminder_text)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        scheduler.add_job(
            send_reminder,
            "date",
            run_date=reminder_datetime,
            args=[context, chat_id, reminder_text]
        )

        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_datetime.strftime('%H:%M')}."
        )

    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /napomni HH:MM —Ç–µ–∫—Å—Ç")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(context: ContextTypes.DEFAULT_TYPE, chat_id, text):
    await context.bot.send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("napomni", remind))  # –õ–∞—Ç–∏–Ω–∏—Ü–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
