import os
import time
import json
import sqlite3
from datetime import datetime, timedelta
from dateutil import tz
from dateutil.parser import isoparse
from flask import Flask, request, abort, jsonify
import requests
from apscheduler.schedulers.background import BackgroundScheduler

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
PUBLIC_URL     = os.environ.get("PUBLIC_URL")  # –ø—Ä–∏–º–µ—Ä: https://telegram-reminder-bot-ecqb.onrender.com
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET") or (TELEGRAM_TOKEN[-8:] if TELEGRAM_TOKEN else "secret")
PORT           = int(os.environ.get("PORT", "10000"))

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
if not PUBLIC_URL:
    raise ValueError("‚ùå PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω! –£–∫–∞–∂–∏ primary URL —Å–µ—Ä–≤–∏—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://...onrender.com")

API = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
WEBHOOK_URL = f"{PUBLIC_URL.rstrip('/')}/webhook/{WEBHOOK_SECRET}"

DB_PATH = os.path.join(os.path.dirname(__file__), "reminders.db")

# –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ Render –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: WEB_CONCURRENCY=1
# —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π –æ—Ç–ø—Ä–∞–≤–æ–∫ –ø—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ—Ä–∫–µ—Ä–∞—Ö.

# ========= –ë–î =========
def db():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = db()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS chats (
            chat_id INTEGER PRIMARY KEY,
            tz_offset_minutes INTEGER NOT NULL DEFAULT 0  -- —Å–º–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC
        );
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            text TEXT NOT NULL,
            due_at_ts INTEGER NOT NULL,                 -- –≤—Ä–µ–º—è –≤ UTC (epoch seconds)
            status TEXT NOT NULL DEFAULT 'pending',     -- pending | sending | sent | error
            created_at_ts INTEGER NOT NULL,
            sent_at_ts INTEGER
        );
    """)
    cur.execute("CREATE INDEX IF NOT EXISTS idx_rem_due ON reminders(status, due_at_ts);")
    conn.commit()
    conn.close()

init_db()

# ========= TELEGRAM =========
def tg_send_message(chat_id: int, text: str, reply_to_message_id: int | None = None):
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }
    if reply_to_message_id:
        payload["reply_to_message_id"] = reply_to_message_id
    r = requests.post(f"{API}/sendMessage", json=payload, timeout=15)
    r.raise_for_status()
    return r.json()

def tg_set_webhook():
    r = requests.post(f"{API}/setWebhook", json={
        "url": WEBHOOK_URL,
        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞:
        # "secret_token": WEBHOOK_SECRET,
        "drop_pending_updates": False,
        "allowed_updates": ["message"]
    }, timeout=15)
    try:
        ans = r.json()
    except Exception:
        ans = {"ok": False, "raw": r.text}
    print("üì° –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:", ans, flush=True)

# –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –ù–ê –°–¢–ê–†–¢–ï –ø—Ä–æ—Ü–µ—Å—Å–∞
tg_set_webhook()

# ========= –ü–ê–†–°–ò–ù–ì –í–†–ï–ú–ï–ù–ò =========
def parse_remind_time(raw: str, user_offset_min: int) -> tuple[int, str] | None:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º 2 —Ñ–æ—Ä–º–∞—Ç–∞:
    1) –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è: YYYY-MM-DD HH:MM  (—Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
       –ø—Ä–∏–º–µ—Ä: 2025-08-13 15:30 –ü–æ–∑–≤–æ–Ω–∏—Ç—å
    2) –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ: in 10m / in 2h / in 3d
       –ø—Ä–∏–º–µ—Ä: in 45m –í—ã–ø–∏—Ç—å –≤–æ–¥—É
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (due_at_ts_utc, –æ—Å—Ç–∞—Ç–æ–∫_—Ç–µ–∫—Å—Ç–∞) –ª–∏–±–æ None.
    """
    s = raw.strip()

    # –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ "in ..."
    if s.lower().startswith("in "):
        # in 10m | in 2h | in 3d
        try:
            head, rest = s.split(maxsplit=2)[1:]  # "10m", "–¢–µ–∫—Å—Ç..."
        except ValueError:
            return None
        num = ''.join(ch for ch in head if ch.isdigit())
        unit = ''.join(ch for ch in head if ch.isalpha()).lower()
        if not num or unit not in ("m", "h", "d"):
            return None
        n = int(num)
        delta = {"m": timedelta(minutes=n), "h": timedelta(hours=n), "d": timedelta(days=n)}[unit]
        due_local = datetime.utcnow() + timedelta(minutes=user_offset_min) + delta
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ UTC:
        due_utc = due_local - timedelta(minutes=user_offset_min)
        return int(due_utc.timestamp()), rest.strip()

    # –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ: "YYYY-MM-DD HH:MM ..."
    # –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –ø–µ—Ä–≤—ã–µ 16 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç
    if len(s) >= 16 and s[4] == "-" and s[7] == "-" and s[10] == " " and s[13] == ":":
        dt_part = s[:16]  # "YYYY-MM-DD HH:MM"
        try:
            y, m, d = int(dt_part[0:4]), int(dt_part[5:7]), int(dt_part[8:10])
            hh, mm = int(dt_part[11:13]), int(dt_part[14:16])
            due_local = datetime(y, m, d, hh, mm)
            # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UTC
            due_utc = due_local - timedelta(minutes=user_offset_min)
            return int(due_utc.timestamp()), s[16:].strip()
        except Exception:
            return None

    # ISO-–≤–∞—Ä–∏–∞–Ω—Ç (—Ä–µ–¥–∫–æ, –Ω–æ –≤–¥—Ä—É–≥): 2025-08-13T15:30
    try:
        dt = isoparse(s.split()[0])
        # —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ tzinfo
        if dt.tzinfo is None:
            due_utc = dt - timedelta(minutes=user_offset_min)
        else:
            due_utc = dt.astimezone(tz.UTC).replace(tzinfo=None)
        rest = s.replace(s.split()[0], "", 1).strip()
        return int(due_utc.timestamp()), rest
    except Exception:
        return None

# ========= –õ–û–ì–ò–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô =========
def list_reminders_text(chat_id: int, user_offset_min: int) -> str:
    con = db()
    cur = con.cursor()
    cur.execute("""
        SELECT id, text, due_at_ts FROM reminders
        WHERE chat_id=? AND status IN ('pending','sending')
        ORDER BY due_at_ts ASC
        LIMIT 20
    """, (chat_id,))
    rows = cur.fetchall()
    con.close()
    if not rows:
        return "–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
    lines = ["<b>–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>"]
    for r in rows:
        due_local = datetime.utcfromtimestamp(r["due_at_ts"]) + timedelta(minutes=user_offset_min)
        lines.append(f"‚Ä¢ #{r['id']} ‚Äî {due_local:%Y-%m-%d %H:%M} ‚Äî {r['text']}")
    return "\n".join(lines)

def add_reminder(chat_id: int, text: str, due_at_ts: int):
    con = db()
    cur = con.cursor()
    cur.execute("""
        INSERT INTO reminders(chat_id, text, due_at_ts, status, created_at_ts)
        VALUES (?,?,?,?,?)
    """, (chat_id, text, due_at_ts, 'pending', int(time.time())))
    con.commit()
    rid = cur.lastrowid
    con.close()
    return rid

def delete_reminder(chat_id: int, rid: int) -> bool:
    con = db()
    cur = con.cursor()
    cur.execute("DELETE FROM reminders WHERE id=? AND chat_id=? AND status IN ('pending','sending')",
                (rid, chat_id))
    ok = cur.rowcount > 0
    con.commit()
    con.close()
    return ok

def get_user_offset(chat_id: int) -> int:
    con = db()
    cur = con.cursor()
    cur.execute("SELECT tz_offset_minutes FROM chats WHERE chat_id=?", (chat_id,))
    row = cur.fetchone()
    if row is None:
        cur.execute("INSERT OR IGNORE INTO chats(chat_id, tz_offset_minutes) VALUES (?,0)", (chat_id,))
        con.commit()
        con.close()
        return 0
    con.close()
    return int(row["tz_offset_minutes"])

def set_user_offset(chat_id: int, minutes: int):
    con = db()
    cur = con.cursor()
    cur.execute("INSERT INTO chats(chat_id, tz_offset_minutes) VALUES (?,?) ON CONFLICT(chat_id) DO UPDATE SET tz_offset_minutes=excluded.tz_offset_minutes",
                (chat_id, minutes))
    con.commit()
    con.close()

def pick_and_mark_due(limit: int = 20):
    """
    –ë–µ—Ä—ë–º –ø–∞—á–∫—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö 'pending' –∏ –∞—Ç–æ–º–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ 'sending',
    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π –ø—Ä–∏ —Ä–µ–¥–∫–∏—Ö –≥–æ–Ω–∫–∞—Ö.
    """
    con = db()
    con.isolation_level = "EXCLUSIVE"
    cur = con.cursor()
    now_ts = int(time.time())
    cur.execute("""
        SELECT id FROM reminders
        WHERE status='pending' AND due_at_ts<=?
        ORDER BY due_at_ts ASC
        LIMIT ?
    """, (now_ts, limit))
    ids = [row["id"] for row in cur.fetchall()]
    sending = []
    for rid in ids:
        cur.execute("UPDATE reminders SET status='sending' WHERE id=? AND status='pending'", (rid,))
        if cur.rowcount:
            sending.append(rid)
    con.commit()
    con.close()
    return sending

def load_reminder(rid: int):
    con = db()
    cur = con.cursor()
    cur.execute("SELECT * FROM reminders WHERE id=?", (rid,))
    row = cur.fetchone()
    con.close()
    return row

def mark_sent(rid: int):
    con = db()
    cur = con.cursor()
    cur.execute("UPDATE reminders SET status='sent', sent_at_ts=? WHERE id=?", (int(time.time()), rid))
    con.commit()
    con.close()

def mark_error(rid: int):
    con = db()
    cur = con.cursor()
    cur.execute("UPDATE reminders SET status='pending' WHERE id=?", (rid,))
    con.commit()
    con.close()

def tick_send_due():
    try:
        ids = pick_and_mark_due(30)
        for rid in ids:
            r = load_reminder(rid)
            if not r:
                continue
            chat_id = r["chat_id"]
            text = r["text"]
            try:
                tg_send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
                mark_sent(rid)
            except Exception as e:
                print(f"Send error for #{rid}: {e}", flush=True)
                mark_error(rid)
    except Exception as e:
        print("tick error:", e, flush=True)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler(timezone="UTC")
scheduler.add_job(tick_send_due, "interval", seconds=15, id="tick_send_due", max_instances=1, coalesce=True)
scheduler.start()

# ========= FLASK =========
app = Flask(__name__)

@app.get("/")
def root():
    return "OK, bot is running ‚úÖ"

@app.get("/health")
def health():
    return jsonify(ok=True, ts=int(time.time()))

@app.post(f"/webhook/{WEBHOOK_SECRET}")
def webhook():
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–∏—à—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ setWebhook, –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∏–∂–µ:
    # if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
    #     abort(401)

    update = request.get_json(force=True, silent=True) or {}
    message = update.get("message") or {}
    text = (message.get("text") or "").strip()
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    message_id = message.get("message_id")

    if not chat_id or not text:
        return jsonify(ok=True)

    # –ö–æ–º–∞–Ω–¥—ã
    if text.startswith("/start"):
        tg_send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n\n"
                                 "–ö–æ–º–∞–Ω–¥—ã:\n"
                                 "‚Ä¢ /remind YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç\n"
                                 "‚Ä¢ /remind in 10m –¢–µ–∫—Å—Ç  (m=–º–∏–Ω—É—Ç—ã, h=—á–∞—Å—ã, d=–¥–Ω–∏)\n"
                                 "‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n"
                                 "‚Ä¢ /delete ID ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É\n"
                                 "‚Ä¢ /settz +5  ‚Äî —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ø—Ä–∏–º–µ—Ä, GMT+5)\n")
        return jsonify(ok=True)

    if text.startswith("/help"):
        tg_send_message(chat_id, "–ü–æ–º–æ—â—å:\n"
                                 "/remind 2025-08-13 15:30 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
                                 "/remind in 45m –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤\n"
                                 "/list ‚Äî —Å–ø–∏—Å–æ–∫\n"
                                 "/delete 12 ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Ññ12\n"
                                 "/settz +5 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC)")
        return jsonify(ok=True)

    if text.startswith("/settz"):
        arg = text.replace("/settz", "", 1).strip()
        # –æ–∂–∏–¥–∞–µ–º +5, -3, +5:30 –∏ —Ç.–ø.
        try:
            if ":" in arg:
                sign = 1 if arg.strip().startswith("+") else -1
                hh, mm = arg.replace("+","").replace("-","").split(":", 1)
                minutes = sign * (int(hh) * 60 + int(mm))
            else:
                minutes = int(float(arg) * 60)  # "+5" -> 300
            set_user_offset(chat_id, minutes)
            tg_send_message(chat_id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {minutes:+d} –º–∏–Ω—É—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC")
        except Exception:
            tg_send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: /settz +5  –∏–ª–∏  /settz -3:30")
        return jsonify(ok=True)

    if text.startswith("/list"):
        off = get_user_offset(chat_id)
        tg_send_message(chat_id, list_reminders_text(chat_id, off))
        return jsonify(ok=True)

    if text.startswith("/delete"):
        arg = text.replace("/delete", "", 1).strip()
        try:
            rid = int(arg)
            ok = delete_reminder(chat_id, rid)
            tg_send_message(chat_id, "–£–¥–∞–ª–µ–Ω–æ." if ok else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception:
            tg_send_message(chat_id, "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: /delete 12")
        return jsonify(ok=True)

    if text.startswith("/remind"):
        rest = text.replace("/remind", "", 1).strip()
        off = get_user_offset(chat_id)
        parsed = parse_remind_time(rest, off)
        if not parsed:
            tg_send_message(chat_id, "–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è.\n"
                                     "–ü—Ä–∏–º–µ—Ä—ã:\n"
                                     "/remind 2025-08-13 15:30 –ü–æ–∑–≤–æ–Ω–∏—Ç—å\n"
                                     "/remind in 45m –í—ã–π—Ç–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É")
            return jsonify(ok=True)
        due_ts, msg = parsed
        if not msg:
            tg_send_message(chat_id, "–î–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏.")
            return jsonify(ok=True)
        rid = add_reminder(chat_id, msg, due_ts)
        due_local = datetime.utcfromtimestamp(due_ts) + timedelta(minutes=off)
        tg_send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å–∞–ª #{rid} –Ω–∞ {due_local:%Y-%m-%d %H:%M}\n–¢–µ–∫—Å—Ç: {msg}")
        return jsonify(ok=True)

    # –ü—Ä–æ—á–∏–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
    tg_send_message(chat_id, "–Ø –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã /remind, /list, /delete, /settz. –ù–∞–ø–∏—à–∏ /help.")
    return jsonify(ok=True)

# WSGI —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è gunicorn: server:app
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)
