import os
import json
import threading
import time
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo

import requests
import gspread
from google.oauth2.service_account import Credentials
from flask import Flask, request, jsonify

# ==========================
# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ env
# ==========================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # —Ç–≤–æ–π render URL
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")  # 1_J8qv... (—Ç—ã —É–∂–µ –¥–∞–ª)
GSA_JSON = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")  # JSON —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ (—Ü–µ–ª–∏–∫–æ–º)

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
missing = [name for name, val in [
    ("TELEGRAM_TOKEN", TELEGRAM_TOKEN),
    ("WEBHOOK_URL", WEBHOOK_URL),
    ("GOOGLE_SHEET_ID", GOOGLE_SHEET_ID),
    ("GOOGLE_SERVICE_ACCOUNT_JSON", GSA_JSON),
] if not val]
if missing:
    raise ValueError(f"‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")

# –¢–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (GMT+5 ‚âà Asia/Yekaterinburg). –ú–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
LOCAL_TZ = ZoneInfo("Asia/Yekaterinburg")

# –î–≤–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–∞–≤–∞–ª —Ä–∞–Ω–µ–µ
DEFAULT_CHAT_IDS = [
    "370958352",
    "7148028443",
]

# ==========================
# üìÑ –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π
# ==========================
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

def get_gspread_client():
    info = json.loads(GSA_JSON)
    creds = Credentials.from_service_account_info(info, scopes=SCOPE)
    return gspread.authorize(creds)

def open_sheet():
    gc = get_gspread_client()
    sh = gc.open_by_key(GOOGLE_SHEET_ID)
    ws = sh.sheet1  # –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    return ws

HEADERS = ["chat_id", "text", "date", "time", "tz", "status", "created_at", "sent_at"]

def ensure_headers(ws):
    values = ws.get_all_values()
    if not values:
        ws.append_row(HEADERS)
        return
    # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å—Ç—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if values[0] != HEADERS:
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–µ –±—É–¥–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ–¥–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
        # –Ω–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–æ–µ
        ws.update("1:1", [HEADERS])

def sheet_is_empty(ws):
    return len(ws.get_all_values()) <= 1  # —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ –≤–æ–æ–±—â–µ –ø—É—Å—Ç–æ

def add_test_reminders_if_needed(ws):
    """–î–æ–±–∞–≤–ª—è–µ—Ç 2 —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è."""
    if not sheet_is_empty(ws):
        return

    now_local = datetime.now(LOCAL_TZ)
    r1_time = (now_local + timedelta(minutes=5)).time().strftime("%H:%M")
    r2_time = (now_local + timedelta(minutes=10)).time().strftime("%H:%M")
    date_str = now_local.date().isoformat()
    tz_str = "Asia/Yekaterinburg"

    rows = []
    for chat_id in DEFAULT_CHAT_IDS:
        rows.append([chat_id, "–¢–µ—Å—Ç ‚Ññ1 ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç", date_str, r1_time, tz_str, "pending",
                     now_local.isoformat(), ""])
        rows.append([chat_id, "–¢–µ—Å—Ç ‚Ññ2 ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç", date_str, r2_time, tz_str, "pending",
                     now_local.isoformat(), ""])

    ws.append_rows(rows, value_input_option="USER_ENTERED")

def parse_dt(date_str, time_str, tz_str):
    """–°–æ–±–∏—Ä–∞–µ–º aware-datetime –∏–∑ —è—á–µ–π–∫–∏."""
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å TZ
    try:
        tz = ZoneInfo(tz_str) if tz_str else LOCAL_TZ
    except Exception:
        tz = LOCAL_TZ

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ 2025-08-13 –∏ 13.08.2025
    try:
        d = datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        d = datetime.strptime(date_str, "%d.%m.%Y").date()

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HH:MM
    t = datetime.strptime(time_str, "%H:%M").time()

    return datetime(d.year, d.month, d.day, t.hour, t.minute, tzinfo=tz)

def get_due_rows(ws, now_utc):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (row_index, row_values) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    values = ws.get_all_values()
    due = []
    if len(values) <= 1:
        return due

    # –ü–æ—Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    headers = values[0]
    idx = {name: headers.index(name) for name in HEADERS}

    for i, row in enumerate(values[1:], start=2):  # —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü–µ
        try:
            status = row[idx["status"]].strip().lower() if len(row) > idx["status"] else ""
            if status == "sent":
                continue

            chat_id = row[idx["chat_id"]].strip()
            text = row[idx["text"]].strip()
            date_str = row[idx["date"]].strip()
            time_str = row[idx["time"]].strip()
            tz_str = row[idx["tz"]].strip() if len(row) > idx["tz"] else ""
            if not (chat_id and text and date_str and time_str):
                continue

            run_dt = parse_dt(date_str, time_str, tz_str)
            run_utc = run_dt.astimezone(timezone.utc)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –ø–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è ‚â§ —Å–µ–π—á–∞—Å (UTC), —Å –∑–∞–ø–∞—Å–æ–º –≤ 60 —Å–µ–∫
            if run_utc <= now_utc + timedelta(seconds=1):
                due.append((i, row))
        except Exception:
            # –ª—é–±—É—é –∫—Ä–∏–≤—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–ø–∞–µ–º
            continue

    return due

def mark_sent(ws, row_number):
    ws.update_cell(row_number, HEADERS.index("status") + 1, "sent")
    ws.update_cell(row_number, HEADERS.index("sent_at") + 1, datetime.now(timezone.utc).isoformat())

# ==========================
# ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
# ==========================
def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        r = requests.post(url, json=payload, timeout=10)
        return r.ok
    except Exception:
        return False

# ==========================
# ‚è± –§–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
# ==========================
def scheduler_loop():
    time.sleep(3)  # –ø–æ–¥–æ–∂–¥—ë–º, –ø–æ–∫–∞ Render –ø–æ–¥–Ω–∏–º–µ—Ç —Å–µ—Ç—å
    ws = None
    while True:
        try:
            if ws is None:
                ws = open_sheet()
                ensure_headers(ws)
                add_test_reminders_if_needed(ws)

            now_utc = datetime.now(timezone.utc)
            for row_number, row in get_due_rows(ws, now_utc):
                chat_id = row[HEADERS.index("chat_id")]
                text = row[HEADERS.index("text")]
                ok = send_message(chat_id, text)
                if ok:
                    mark_sent(ws, row_number)
                else:
                    # –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å/–ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–∑–∂–µ ‚Äî –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏–º pending
                    pass

        except Exception:
            # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–º—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∫—Ä—É–≥–µ
            ws = None

        time.sleep(30)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

# ==========================
# üåê Flask + Webhook
# ==========================
app = Flask(__name__)

@app.route("/", methods=["GET"])
def index():
    return "OK", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    # –ú—ã –Ω–µ –æ–±—è–∑–∞–Ω—ã —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å —Å –∞–ø–¥–µ–π—Ç–∞–º–∏. –ù–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî
    # –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å /start:
    try:
        data = request.get_json(silent=True) or {}
        message = data.get("message") or {}
        text = (message.get("text") or "").strip()
        chat_id = (message.get("chat", {}) or {}).get("id")
        if text == "/start" and chat_id:
            send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–∏—Ç–∞—é –∏–∑ Google-—Ç–∞–±–ª–∏—Ü—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    except Exception:
        pass
    return jsonify(ok=True)

def set_webhook():
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook"
    payload = {"url": f"{WEBHOOK_URL}/webhook", "drop_pending_updates": True}
    try:
        r = requests.post(url, json=payload, timeout=10)
        print("üì° setWebhook:", r.json())
    except Exception as e:
        print("setWebhook error:", e)

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å—ë –ø—Ä–∏ –∏–º–ø–æ—Ä—Çe –º–æ–¥—É–ª—è (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç gunicorn)
set_webhook()
threading.Thread(target=scheduler_loop, daemon=True).start()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è gunicorn
# gunicorn server:app
